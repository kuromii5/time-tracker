basePath: /
definitions:
  httperr.ErrResponse:
    properties:
      error:
        description: application-level error message, for debugging
        type: string
      status:
        description: user-level status message
        type: string
    type: object
  models.Passport:
    properties:
      number:
        type: string
      serie:
        type: string
    type: object
  models.People:
    properties:
      address:
        type: string
      name:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    type: object
  models.User:
    properties:
      id:
        type: integer
      passport:
        $ref: '#/definitions/models.Passport'
      people:
        $ref: '#/definitions/models.People'
    type: object
  user.CreateUserRequest:
    properties:
      passportNumber:
        type: string
    type: object
  user.CreateUserResponse:
    properties:
      user_id:
        type: integer
    type: object
  user.UpdateUserRequest:
    properties:
      passport:
        properties:
          number:
            type: string
          serie:
            type: string
        type: object
      people:
        properties:
          address:
            type: string
          name:
            type: string
          patronymic:
            type: string
          surname:
            type: string
        type: object
    type: object
  user.UsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  worklog.StartWorklogRequest:
    properties:
      task:
        type: string
      user_id:
        type: integer
    type: object
  worklog.StartWorklogResponse:
    properties:
      worklog_id:
        type: integer
    type: object
  worklog.WorklogResponse:
    properties:
      duration:
        type: string
      end_time:
        type: string
      id:
        type: integer
      start_time:
        type: string
      task:
        type: string
      user_id:
        type: integer
    type: object
  worklog.WorklogsRequest:
    properties:
      end_date:
        type: string
      start_date:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is time tracker app, where you can CRUD users, start/finish worklogs
    and watch them for users
  title: Time Tracker
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of users with optional filtering and pagination
      parameters:
      - description: Name
        in: query
        name: name
        type: string
      - description: Surname
        in: query
        name: surname
        type: string
      - description: Patronymic
        in: query
        name: patronymic
        type: string
      - description: Address
        in: query
        name: address
        type: string
      - description: Passport Serie
        in: query
        name: serie
        type: string
      - description: Passport Number
        in: query
        name: number
        type: string
      - description: Created After (timestamp)
        in: query
        name: created_after
        type: string
      - description: Created Before (timestamp)
        in: query
        name: created_before
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved users
          schema:
            $ref: '#/definitions/user.UsersResponse'
        "500":
          description: Failed to get users
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
      summary: Get a list of users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with provided passport number and fetch additional
        data from an external API
      parameters:
      - default: 8081
        description: External API Port
        in: query
        name: extAPIPort
        required: true
        type: integer
      - description: Create User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/user.CreateUserResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
      summary: Delete a user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update a user's details using the provided information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Successfully updated user
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
      summary: Update an existing user
      tags:
      - users
  /users/{userID}/worklogs:
    get:
      consumes:
      - application/json
      description: Get worklogs for a user within a specified date range. Time format
        should be YYYY-MM-DDTHH:MM:SSZ (ISO 8601).
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Worklogs Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/worklog.WorklogsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: List of worklogs
          schema:
            items:
              $ref: '#/definitions/worklog.WorklogResponse'
            type: array
        "400":
          description: Invalid request payload or user ID
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
        "500":
          description: Failed to get worklogs
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
      summary: Get worklogs for a user
      tags:
      - worklogs
  /worklogs/finish/{id}:
    patch:
      consumes:
      - application/json
      description: Finish a worklog with the specified ID
      parameters:
      - description: Worklog ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid worklog ID
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
        "500":
          description: Failed to finish worklog
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
      summary: Finish a worklog
      tags:
      - worklogs
  /worklogs/start:
    post:
      consumes:
      - application/json
      description: Start a new worklog for a specified user with a given task
      parameters:
      - description: Start Worklog Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/worklog.StartWorklogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully started worklog
          schema:
            $ref: '#/definitions/worklog.StartWorklogResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httperr.ErrResponse'
      summary: Start a worklog
      tags:
      - worklogs
swagger: "2.0"
