{
    "swagger": "2.0",
    "info": {
        "description": "This is time tracker app, where you can CRUD users, start/finish worklogs and watch them for users",
        "title": "Time Tracker",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/users": {
            "get": {
                "description": "Retrieve a list of users with optional filtering and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a list of users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Surname",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Patronymic",
                        "name": "patronymic",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Passport Serie",
                        "name": "serie",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Passport Number",
                        "name": "number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created After (timestamp)",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created Before (timestamp)",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved users",
                        "schema": {
                            "$ref": "#/definitions/user.UsersResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get users",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with provided passport number and fetch additional data from an external API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 8081,
                        "description": "External API Port",
                        "name": "extAPIPort",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Create User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "description": "Delete a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a user's details using the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update an existing user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated user"
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/{userID}/worklogs": {
            "get": {
                "description": "Get worklogs for a user within a specified date range. Time format should be YYYY-MM-DDTHH:MM:SSZ (ISO 8601).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "worklogs"
                ],
                "summary": "Get worklogs for a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Worklogs Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/worklog.WorklogsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of worklogs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/worklog.WorklogResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or user ID",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get worklogs",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    }
                }
            }
        },
        "/worklogs/finish/{id}": {
            "patch": {
                "description": "Finish a worklog with the specified ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "worklogs"
                ],
                "summary": "Finish a worklog",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Worklog ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid worklog ID",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to finish worklog",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    }
                }
            }
        },
        "/worklogs/start": {
            "post": {
                "description": "Start a new worklog for a specified user with a given task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "worklogs"
                ],
                "summary": "Start a worklog",
                "parameters": [
                    {
                        "description": "Start Worklog Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/worklog.StartWorklogRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully started worklog",
                        "schema": {
                            "$ref": "#/definitions/worklog.StartWorklogResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httperr.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httperr.ErrResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "application-level error message, for debugging",
                    "type": "string"
                },
                "status": {
                    "description": "user-level status message",
                    "type": "string"
                }
            }
        },
        "models.Passport": {
            "type": "object",
            "properties": {
                "number": {
                    "type": "string"
                },
                "serie": {
                    "type": "string"
                }
            }
        },
        "models.People": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "passport": {
                    "$ref": "#/definitions/models.Passport"
                },
                "people": {
                    "$ref": "#/definitions/models.People"
                }
            }
        },
        "user.CreateUserRequest": {
            "type": "object",
            "properties": {
                "passportNumber": {
                    "type": "string"
                }
            }
        },
        "user.CreateUserResponse": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "user.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "passport": {
                    "type": "object",
                    "properties": {
                        "number": {
                            "type": "string"
                        },
                        "serie": {
                            "type": "string"
                        }
                    }
                },
                "people": {
                    "type": "object",
                    "properties": {
                        "address": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "patronymic": {
                            "type": "string"
                        },
                        "surname": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "user.UsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "worklog.StartWorklogRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "worklog.StartWorklogResponse": {
            "type": "object",
            "properties": {
                "worklog_id": {
                    "type": "integer"
                }
            }
        },
        "worklog.WorklogResponse": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                },
                "task": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "worklog.WorklogsRequest": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        }
    }
}